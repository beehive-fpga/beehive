`include "eth_rx_tile_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module eth_rx_tile 
import tracker_pkg::*;
#(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter IN_NOC = 0
    ,parameter USE_INT_LB = 0
)(
     input clk
    ,input rst
    
    ,input                                  mac_engine_rx_val
    ,input          [`MAC_INTERFACE_W-1:0]  mac_engine_rx_data
    ,input                                  mac_engine_rx_startframe
    ,input          [`MTU_SIZE_W-1:0]       mac_engine_rx_frame_size
    ,input                                  mac_engine_rx_endframe
    ,input          [`MAC_PADBYTES_W-1:0]   mac_engine_rx_padbytes
    ,output logic                           engine_mac_rx_rdy

<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="eth_rx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);

    logic                           eth_rx_out_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   eth_rx_out_vrtoc_data_noc0_data;    
    logic                           vrtoc_eth_rx_out_data_noc0_rdy;
    
    logic                           ctovr_eth_rx_in_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_eth_rx_in_data_noc0_data;
    logic                           eth_rx_in_ctovr_data_noc0_rdy;
    
    logic                           eth_rx_out_log_val;
    logic   [`NOC_DATA_WIDTH-1:0]   eth_rx_out_log_data;    
    logic                           log_eth_rx_out_rdy;
    
    logic                           log_lb_val;
    logic   [`NOC_DATA_WIDTH-1:0]   log_lb_data;    
    logic                           lb_log_rdy;
    
    logic                           lb_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   lb_vrtoc_data_noc0_data;    
    logic                           vrtoc_lb_data_noc0_rdy;
    
    logic                           ctovr_rd_tracker_in_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  ctovr_rd_tracker_in_data;
    logic                           rd_tracker_in_ctovr_rdy;

    logic                           rd_tracker_out_vrtoc_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  rd_tracker_out_vrtoc_data;
    logic                           vrtoc_rd_tracker_out_rdy;

    logic                           router_ctovr_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  router_ctovr_ctrl_noc1_data;
    logic                           ctovr_router_ctrl_noc1_yummy;

    logic                           vrtoc_router_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  vrtoc_router_ctrl_noc1_data;
    logic                           router_vrtoc_ctrl_noc1_yummy;

<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    
    eth_hdr                         eth_format_eth_rx_out_eth_hdr;
    logic                           eth_format_eth_rx_out_hdr_val;
    logic   [`MTU_SIZE_W-1:0]       eth_format_eth_rx_out_data_size;
    logic                           eth_rx_out_eth_format_hdr_rdy;

    logic                           eth_format_eth_rx_out_data_val;
    logic   [`MAC_INTERFACE_W-1:0]  eth_format_eth_rx_out_data;
    logic                           eth_rx_out_eth_format_data_rdy;
    logic                           eth_format_eth_rx_out_data_last;
    logic   [`MAC_PADBYTES_W-1:0]   eth_format_eth_rx_out_data_padbytes;
    
    logic                           src_eth_format_val;
    logic   [`MAC_INTERFACE_W-1:0]  src_eth_format_data;
    logic   [`MTU_SIZE_W-1:0]       src_eth_format_frame_size;
    logic                           src_eth_format_data_last;
    logic   [`MAC_PADBYTES_W-1:0]   src_eth_format_data_padbytes;
    logic                           eth_format_src_rdy;
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) eth_rx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="eth_rx", nocs=tile_config.nocs)
    print(noc_ports)

    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );

    logic                           ctovr_router_ctrl_noc2_yummy;
    logic                           vrtoc_router_ctrl_noc2_val;
    logic   [`NOC_DATA_WIDTH-1:0]   vrtoc_router_ctrl_noc2_data;

    assign ctovr_router_ctrl_noc2_yummy = 1'b0;
    assign vrtoc_router_ctrl_noc2_val = 1'b0;
    assign vrtoc_router_ctrl_noc2_data = '0;

generate
    if (IN_NOC) begin
        eth_rx_noc_in eth_rx_in (
             .clk   (clk    )
            ,.rst   (rst    )
        
            ,.noc_eth_rx_in_val          (ctovr_eth_rx_in_data_noc0_val     )
            ,.noc_eth_rx_in_data         (ctovr_eth_rx_in_data_noc0_data    )
            ,.eth_rx_in_noc_rdy          (eth_rx_in_ctovr_data_noc0_rdy     )
        
            ,.eth_rx_in_dst_val          (src_eth_format_val                )
            ,.eth_rx_in_dst_data         (src_eth_format_data               )
            ,.eth_rx_in_dst_frame_size   (src_eth_format_frame_size         )
            ,.eth_rx_in_dst_data_last    (src_eth_format_data_last          )
            ,.eth_rx_in_dst_data_padbytes(src_eth_format_data_padbytes      )
            ,.dst_eth_rx_in_rdy          (eth_format_src_rdy                )
        );
    
    end
    else begin

        assign src_eth_format_val = mac_engine_rx_val;
        assign src_eth_format_data = mac_engine_rx_data;
        assign src_eth_format_frame_size = mac_engine_rx_frame_size;
        assign src_eth_format_data_last = mac_engine_rx_endframe;
        assign src_eth_format_data_padbytes = mac_engine_rx_padbytes;
        assign engine_mac_rx_rdy = eth_format_src_rdy;
    
        assign eth_rx_in_ctovr_data_noc0_rdy = 1'b0;
    end
endgenerate

    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_data_noc0_data        )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val         )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy       )

        ,.ctovr_dst_data    (ctovr_eth_rx_in_data_noc0_data     )
        ,.ctovr_dst_val     (ctovr_eth_rx_in_data_noc0_val      )
        ,.dst_ctovr_rdy     (eth_rx_in_ctovr_data_noc0_rdy      )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (lb_vrtoc_data_noc0_data        )
        ,.src_vrtoc_val     (lb_vrtoc_data_noc0_val         )
        ,.vrtoc_src_rdy     (vrtoc_lb_data_noc0_rdy         )

        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
        ,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );
    
    eth_frame_format rx_eth_frame_format (
         .clk   (clk)
        ,.rst   (rst)

        ,.src_eth_format_val            (src_eth_format_val                     )
        ,.src_eth_format_data           (src_eth_format_data                    )
        ,.src_eth_format_frame_size     (src_eth_format_frame_size              )
        ,.src_eth_format_data_last      (src_eth_format_data_last               )
        ,.src_eth_format_data_padbytes  (src_eth_format_data_padbytes           )
        ,.eth_format_src_rdy            (eth_format_src_rdy                     )

        ,.eth_format_dst_eth_hdr        (eth_format_eth_rx_out_eth_hdr          )
        ,.eth_format_dst_data_size      (eth_format_eth_rx_out_data_size        )
        ,.eth_format_dst_hdr_val        (eth_format_eth_rx_out_hdr_val          )
        ,.eth_format_dst_timestamp      ()
        ,.dst_eth_format_hdr_rdy        (eth_rx_out_eth_format_hdr_rdy          )

        ,.eth_format_dst_data_val       (eth_format_eth_rx_out_data_val         )
        ,.eth_format_dst_data           (eth_format_eth_rx_out_data             )
        ,.eth_format_dst_data_last      (eth_format_eth_rx_out_data_last        )
        ,.eth_format_dst_data_padbytes  (eth_format_eth_rx_out_data_padbytes    )
        ,.dst_eth_format_data_rdy       (eth_rx_out_eth_format_data_rdy         )
    );

    eth_rx_noc_out_copy #(
         .SRC_X (SRC_X)
        ,.SRC_Y (SRC_Y)
    ) eth_rx_noc_out (
         .clk   (clk)
        ,.rst   (rst)
    
        ,.eth_rx_out_noc0_vrtoc_val             (eth_rx_out_log_val                 )
        ,.eth_rx_out_noc0_vrtoc_data            (eth_rx_out_log_data                )
        ,.noc0_vrtoc_eth_rx_out_rdy             (log_eth_rx_out_rdy                 )

        ,.eth_format_eth_rx_out_eth_hdr         (eth_format_eth_rx_out_eth_hdr      )
        ,.eth_format_eth_rx_out_hdr_val         (eth_format_eth_rx_out_hdr_val      )
        ,.eth_format_eth_rx_out_data_size       (eth_format_eth_rx_out_data_size    )
        ,.eth_rx_out_eth_format_hdr_rdy         (eth_rx_out_eth_format_hdr_rdy      )
                                                                                    
        ,.eth_format_eth_rx_out_data_val        (eth_format_eth_rx_out_data_val     )
        ,.eth_format_eth_rx_out_data            (eth_format_eth_rx_out_data         )
        ,.eth_rx_out_eth_format_data_rdy        (eth_rx_out_eth_format_data_rdy     )
        ,.eth_format_eth_rx_out_data_last       (eth_format_eth_rx_out_data_last    )
        ,.eth_format_eth_rx_out_data_padbytes   (eth_format_eth_rx_out_data_padbytes)
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data        )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val         )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy       )

        ,.ctovr_dst_data    (ctovr_rd_tracker_in_data           )
        ,.ctovr_dst_val     (ctovr_rd_tracker_in_val            )
        ,.dst_ctovr_rdy     (rd_tracker_in_ctovr_rdy            )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) ctrl_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (rd_tracker_out_vrtoc_data      )
        ,.src_vrtoc_val     (rd_tracker_out_vrtoc_val       )
        ,.vrtoc_src_rdy     (vrtoc_rd_tracker_out_rdy       )

        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val     )
        ,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy   )
    );

    tracker_top #(
         .SRC_X                 (SRC_X              )
        ,.SRC_Y                 (SRC_Y              )
        ,.TRACKER_DEPTH_LOG2    (TRACKER_ADDR_W     )
        ,.DATA_NOC_W            (`NOC_DATA_WIDTH    )
        ,.REQ_NOC_W             (`CTRL_NOC_DATA_W   )
        ,.RESP_NOC_W            (`CTRL_NOC_DATA_W   )
    ) tracker (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.ctovr_rd_tracker_in_val   (ctovr_rd_tracker_in_val    )
        ,.ctovr_rd_tracker_in_data  (ctovr_rd_tracker_in_data   )
        ,.rd_tracker_in_ctovr_rdy   (rd_tracker_in_ctovr_rdy    )
                                                                
        ,.rd_tracker_out_vrtoc_val  (rd_tracker_out_vrtoc_val   )
        ,.rd_tracker_out_vrtoc_data (rd_tracker_out_vrtoc_data  )
        ,.vrtoc_rd_tracker_out_rdy  (vrtoc_rd_tracker_out_rdy   )
    
        ,.noc_wr_tracker_in_val     (eth_rx_out_log_val         )
        ,.noc_wr_tracker_in_data    (eth_rx_out_log_data        )
        ,.wr_tracker_noc_in_rdy     (log_eth_rx_out_rdy         )
        
        ,.wr_tracker_noc_out_val    (log_lb_val                 )
        ,.wr_tracker_noc_out_data   (log_lb_data                )
        ,.noc_wr_tracker_out_rdy    (lb_log_rdy                 )
    );

generate
    if (USE_INT_LB == 1) begin
        eth_rx_lb_out lb_out (
             .clk   (clk    )
            ,.rst   (rst    )
        
            ,.src_eth_rx_lb_noc_val     (log_lb_val             )
            ,.src_eth_rx_lb_noc_data    (log_lb_data            )
            ,.eth_rx_lb_src_noc_rdy     (lb_log_rdy             )
        
            ,.eth_rx_lb_dst_noc_val     (lb_vrtoc_data_noc0_val  )
            ,.eth_rx_lb_dst_noc_data    (lb_vrtoc_data_noc0_data )
            ,.dst_eth_rx_lb_noc_rdy     (vrtoc_lb_data_noc0_rdy  )
        );
    end
    else begin
        assign lb_vrtoc_data_noc0_val = log_lb_val;
        assign lb_vrtoc_data_noc0_data = log_lb_data;
        assign lb_log_rdy = vrtoc_lb_data_noc0_rdy;
    end
endgenerate
endmodule
