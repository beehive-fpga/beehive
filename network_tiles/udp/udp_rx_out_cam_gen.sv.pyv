`include "udp_rx_tile_defs.svh"
module udp_rx_out_cam
import beehive_eth_latency_logger_msg::*;
(
     input clk
    ,input rst

    ,input  logic                               rd_cam_val
    ,input  logic   [`PORT_NUM_W-1:0]           rd_cam_tag  
    ,output logic   [UDP_RX_CAM_ENTRY_W-1:0]    rd_cam_data
    ,output logic                               rd_cam_hit
);

<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
%>

<%
endpoint = tile_config.endpoint_dict["udp_rx_tile"]
interface = endpoint.interfaces["udp_pkt_rx"]
cam_dsts = 0

for dst in interface.dsts:
    if "cam_target" in dst:
        cam_dsts += 1
print(f"    localparam UDP_RX_NUM_DST = {cam_dsts};")
%>
    
    logic   [UDP_RX_NUM_DST-1:0][`PORT_NUM_W-1:0]   udp_port_tags;
    logic   [UDP_RX_NUM_DST-1:0][UDP_RX_CAM_ENTRY_W-1:0]    udp_cam_data;
    logic   [UDP_RX_NUM_DST-1:0]                    one_hot_sel_mux_sel;

    assign rd_cam_hit = rd_cam_val & (|one_hot_sel_mux_sel);
    
    always_ff @(posedge clk) begin
        if (rst) begin
<%
for i in range(0, len(interface.dsts)):
    dst_endpoint = interface.dsts[i];
    if "cam_target" in dst_endpoint:
        dst_endpoint_obj = tile_config.endpoint_dict[dst_endpoint["endpoint_name"]]
        dst_interface_obj = dst_endpoint_obj.interfaces[dst_endpoint["if_name"]]
        x_coord_name = dst_endpoint_obj.get_x_coord_param()
        y_coord_name = dst_endpoint_obj.get_y_coord_param()
        print(
f"""        udp_port_tags[{i}] <= {dst_endpoint["endpoint_tag"]};
            udp_cam_data[{i}] <= {{{x_coord_name},
                                   {y_coord_name},
                                   {dst_interface_obj.fbits}}};""")
%>
        end
    end
    
    genvar i;
    generate
        for (i = 0; i < UDP_RX_NUM_DST; i++) begin: one_hot_proto_sel
            assign one_hot_sel_mux_sel[i] = udp_port_tags[i] == rd_cam_tag;
        end
    endgenerate

    bsg_mux_one_hot #(
         .width_p   (UDP_RX_CAM_ENTRY_W )
        ,.els_p     (UDP_RX_NUM_DST     )
    ) mux_proto_dst (
         .data_i        (udp_cam_data       )
        ,.sel_one_hot_i (one_hot_sel_mux_sel)
        ,.data_o        (rd_cam_data        )
    );

endmodule
