`include "eth_tx_tile_defs.svh"
`include "eth_latency_stats_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module eth_tx_tile 
import beehive_noc_msg::*;
import tracker_pkg::*;
#(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter UDP_STATS_DST_X = -1
    ,parameter UDP_STATS_DST_Y = -1
)(
     input clk
    ,input rst
    
    ,output logic                               engine_mac_tx_val
    ,input                                      mac_engine_tx_rdy
    ,output logic                               engine_mac_tx_startframe
    ,output logic   [`MTU_SIZE_W-1:0]           engine_mac_tx_frame_size 
    ,output logic                               engine_mac_tx_endframe
    ,output logic   [`MAC_INTERFACE_W-1:0]      engine_mac_tx_data
    ,output logic   [`MAC_PADBYTES_W-1:0]       engine_mac_tx_padbytes
<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="eth_tx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);

<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>

    
    logic                           eth_tx_out_noc0_vrtoc_val;
    logic   [`NOC_DATA_WIDTH-1:0]   eth_tx_out_noc0_vrtoc_data;    
    logic                           noc0_vrtoc_eth_tx_out_rdy;
    
    logic                           noc0_ctovr_eth_tx_in_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_ctovr_eth_tx_in_data;
    logic                           eth_tx_in_noc0_ctovr_rdy;     

    logic                           eth_tx_in_eth_tostream_eth_hdr_val;
    eth_hdr                         eth_tx_in_eth_tostream_eth_hdr;
    logic   [`MTU_SIZE_W-1:0]       eth_tx_in_eth_tostream_payload_len;
    tracker_stats_struct            eth_tx_in_eth_tostream_timestamp;
    logic                           eth_tostream_eth_tx_in_eth_hdr_rdy;

    logic                           eth_tx_in_eth_tostream_data_val;
    logic   [`MAC_INTERFACE_W-1:0]  eth_tx_in_eth_tostream_data;
    logic                           eth_tx_in_eth_tostream_data_last;
    logic   [`MAC_PADBYTES_W-1:0]   eth_tx_in_eth_tostream_data_padbytes;
    logic                           eth_tostream_eth_tx_in_data_rdy;

    logic                           noc0_ctovr_log_in_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_ctovr_log_in_data;
    logic                           log_in_noc0_ctovr_rdy;
    
    logic                           log_splitter_in_val;
    logic   [`NOC_DATA_WIDTH-1:0]   log_splitter_in_data;
    logic                           splitter_in_log_rdy;

    logic                           merger_out_noc0_vrtoc_val;
    logic   [`NOC_DATA_WIDTH-1:0]   merger_out_noc0_vrtoc_data;
    logic                           noc0_vrtoc_merger_out_rdy;
    
    logic                           noc0_ctovr_eth_stats_in_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_ctovr_eth_stats_in_data;
    logic                           eth_stats_in_noc0_ctovr_rdy;

    logic                           eth_stats_out_noc0_vrtoc_val;
    logic   [`NOC_DATA_WIDTH-1:0]   eth_stats_out_noc0_vrtoc_data;
    logic                           noc0_vrtoc_eth_stats_out_rdy;
    
    logic                           eth_wr_log;
    tracker_stats_struct            eth_wr_log_start_timestamp;
    
    logic                           ctovr_rd_tracker_in_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  ctovr_rd_tracker_in_data;
    logic                           rd_tracker_in_ctovr_rdy;

    logic                           rd_tracker_out_vrtoc_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  rd_tracker_out_vrtoc_data;
    logic                           vrtoc_rd_tracker_out_rdy;

    logic                           router_ctovr_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  router_ctovr_ctrl_noc1_data;
    logic                           ctovr_router_ctrl_noc1_yummy;

    logic                           vrtoc_router_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  vrtoc_router_ctrl_noc1_data;
    logic                           router_vrtoc_ctrl_noc1_yummy;
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) eth_tx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="eth_tx", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );

    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_tx_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_data_noc0_data    )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val     )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (noc0_ctovr_log_in_data         )
        ,.ctovr_dst_val     (noc0_ctovr_log_in_val          )
        ,.dst_ctovr_rdy     (log_in_noc0_ctovr_rdy          )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) tile_tx_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (merger_out_noc0_vrtoc_data     )
        ,.src_vrtoc_val     (merger_out_noc0_vrtoc_val      )
        ,.vrtoc_src_rdy     (noc0_vrtoc_merger_out_rdy      )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
        ,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) tile_tx_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        //credit based interface 
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data    )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val     )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy   )

        //val/rdy interface
        ,.ctovr_dst_data    (ctovr_rd_tracker_in_data       )
        ,.ctovr_dst_val     (ctovr_rd_tracker_in_val        )
        ,.dst_ctovr_rdy     (rd_tracker_in_ctovr_rdy        )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) tile_tx_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        //val/rdy interface
        ,.src_vrtoc_data    (rd_tracker_out_vrtoc_data      )
        ,.src_vrtoc_val     (rd_tracker_out_vrtoc_val       )
        ,.vrtoc_src_rdy     (vrtoc_rd_tracker_out_rdy       )

		//credit based interface	
        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val     )
        ,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy   )
    );

    tracker_top #(
         .SRC_X                 (SRC_X              )
        ,.SRC_Y                 (SRC_Y              )
        ,.TRACKER_DEPTH_LOG2    (TRACKER_ADDR_W     )
        ,.DATA_NOC_W            (`NOC_DATA_WIDTH    )
        ,.REQ_NOC_W             (`CTRL_NOC_DATA_W   )
        ,.RESP_NOC_W            (`CTRL_NOC_DATA_W   )
    ) tracker (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.ctovr_rd_tracker_in_val   (ctovr_rd_tracker_in_val    )
        ,.ctovr_rd_tracker_in_data  (ctovr_rd_tracker_in_data   )
        ,.rd_tracker_in_ctovr_rdy   (rd_tracker_in_ctovr_rdy    )
                                                                
        ,.rd_tracker_out_vrtoc_val  (rd_tracker_out_vrtoc_val   )
        ,.rd_tracker_out_vrtoc_data (rd_tracker_out_vrtoc_data  )
        ,.vrtoc_rd_tracker_out_rdy  (vrtoc_rd_tracker_out_rdy   )
    
        ,.noc_wr_tracker_in_val     (noc0_ctovr_log_in_val      )
        ,.noc_wr_tracker_in_data    (noc0_ctovr_log_in_data     )
        ,.wr_tracker_noc_in_rdy     (log_in_noc0_ctovr_rdy      )
        
        ,.wr_tracker_noc_out_val    (log_splitter_in_val        )
        ,.wr_tracker_noc_out_data   (log_splitter_in_data       )
        ,.noc_wr_tracker_out_rdy    (splitter_in_log_rdy        )
    );

    assign eth_tx_out_noc0_vrtoc_val = 1'b0;
    assign eth_tx_out_noc0_vrtoc_data = '0;
    
    beehive_noc_prio_merger #(
        .num_sources    (2)
        ,.NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`MSG_LENGTH_WIDTH  )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
    ) merger (   
         .clk   (clk)
        ,.rst_n (~rst)
    
        ,.src0_merger_vr_noc_val    (eth_tx_out_noc0_vrtoc_val      )
        ,.src0_merger_vr_noc_dat    (eth_tx_out_noc0_vrtoc_data     )
        ,.merger_src0_vr_noc_rdy    (noc0_vrtoc_eth_tx_out_rdy      )
    
        ,.src1_merger_vr_noc_val    (eth_stats_out_noc0_vrtoc_val   )
        ,.src1_merger_vr_noc_dat    (eth_stats_out_noc0_vrtoc_data  )
        ,.merger_src1_vr_noc_rdy    (noc0_vrtoc_eth_stats_out_rdy   )
    
        ,.src2_merger_vr_noc_val    ('0)
        ,.src2_merger_vr_noc_dat    ('0)
        ,.merger_src2_vr_noc_rdy    ()
    
        ,.src3_merger_vr_noc_val    ('0)
        ,.src3_merger_vr_noc_dat    ('0)
        ,.merger_src3_vr_noc_rdy    ()
    
        ,.src4_merger_vr_noc_val    ('0)
        ,.src4_merger_vr_noc_dat    ('0)
        ,.merger_src4_vr_noc_rdy    ()
    
        ,.merger_dst_vr_noc_val     (merger_out_noc0_vrtoc_val      )
        ,.merger_dst_vr_noc_dat     (merger_out_noc0_vrtoc_data     )
        ,.dst_merger_vr_noc_rdy     (noc0_vrtoc_merger_out_rdy      )
    );
    
    // split between the record and read paths
    beehive_noc_fbits_splitter #(
         .num_targets   (3'd2)
        ,.fbits_type0   (PKT_IF_FBITS                       )
        ,.fbits_type1   (ETH_LATENCY_LOGGER_READ_IF_FBITS   )
        ,.NOC_FBITS_W       (`NOC_FBITS_WIDTH               )
        ,.NOC_DATA_W        (`NOC_DATA_WIDTH                )
        ,.MSG_PAYLOAD_LEN   (`MSG_LENGTH_WIDTH              )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI                 )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO                 )
        ,.FBITS_HI          (`MSG_DST_FBITS_HI              )
        ,.FBITS_LO          (`MSG_DST_FBITS_LO              )
    ) splitter (
         .clk   (clk    )
        ,.rst_n (~rst   )

        ,.src_splitter_vr_noc_val   (log_splitter_in_val            )
        ,.src_splitter_vr_noc_dat   (log_splitter_in_data           )
        ,.splitter_src_vr_noc_rdy   (splitter_in_log_rdy            )

        ,.splitter_dst0_vr_noc_val  (noc0_ctovr_eth_tx_in_val       )
        ,.splitter_dst0_vr_noc_dat  (noc0_ctovr_eth_tx_in_data      )
        ,.dst0_splitter_vr_noc_rdy  (eth_tx_in_noc0_ctovr_rdy       )

        ,.splitter_dst1_vr_noc_val  (noc0_ctovr_eth_stats_in_val    )
        ,.splitter_dst1_vr_noc_dat  (noc0_ctovr_eth_stats_in_data   )
        ,.dst1_splitter_vr_noc_rdy  (eth_stats_in_noc0_ctovr_rdy    )

        ,.splitter_dst2_vr_noc_val  ()
        ,.splitter_dst2_vr_noc_dat  ()
        ,.dst2_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  (1'b0)
    );
    
    eth_tx_noc_in eth_tx_noc_in (
         .clk   (clk)
        ,.rst   (rst)
        
        ,.noc0_ctovr_eth_tx_in_val              (noc0_ctovr_eth_tx_in_val               )
        ,.noc0_ctovr_eth_tx_in_data             (noc0_ctovr_eth_tx_in_data              )
        ,.eth_tx_in_noc0_ctovr_rdy              (eth_tx_in_noc0_ctovr_rdy               )

        ,.eth_tx_in_eth_tostream_eth_hdr_val    (eth_tx_in_eth_tostream_eth_hdr_val     )
        ,.eth_tx_in_eth_tostream_eth_hdr        (eth_tx_in_eth_tostream_eth_hdr         )
        ,.eth_tx_in_eth_tostream_payload_len    (eth_tx_in_eth_tostream_payload_len     )
        ,.eth_tostream_eth_tx_in_eth_hdr_rdy    (eth_tostream_eth_tx_in_eth_hdr_rdy     )
                                                                                        
        ,.eth_tx_in_eth_tostream_data_val       (eth_tx_in_eth_tostream_data_val        )
        ,.eth_tx_in_eth_tostream_data           (eth_tx_in_eth_tostream_data            )
        ,.eth_tx_in_eth_tostream_data_last      (eth_tx_in_eth_tostream_data_last       )
        ,.eth_tx_in_eth_tostream_data_padbytes  (eth_tx_in_eth_tostream_data_padbytes   )
        ,.eth_tostream_eth_tx_in_data_rdy       (eth_tostream_eth_tx_in_data_rdy        )

        ,.eth_wr_log                            (eth_wr_log                             )
        ,.eth_wr_log_start_timestamp            (eth_wr_log_start_timestamp             )
    );
    
    eth_latency_stats #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
        ,.NOC1_DATA_W   (`NOC_DATA_WIDTH    )
        ,.NOC2_DATA_W   (`NOC_DATA_WIDTH    )
        ,.UDP_DST_X     (UDP_STATS_DST_X    )
        ,.UDP_DST_Y     (UDP_STATS_DST_Y    )
    ) stats (
         .clk   (clk    )
        ,.rst   (rst    )

        ,.eth_wr_log                    (eth_wr_log                             )
        ,.eth_wr_log_start_timestamp    (eth_wr_log_start_timestamp.timestamp   )

        ,.ctovr_eth_stats_in_val        (noc0_ctovr_eth_stats_in_val            )
        ,.ctovr_eth_stats_in_data       (noc0_ctovr_eth_stats_in_data           )
        ,.eth_stats_in_ctovr_rdy        (eth_stats_in_noc0_ctovr_rdy            )

        ,.eth_stats_out_vrtoc_val       (eth_stats_out_noc0_vrtoc_val           )
        ,.eth_stats_out_vrtoc_data      (eth_stats_out_noc0_vrtoc_data          )
        ,.vrtoc_eth_stats_out_rdy       (noc0_vrtoc_eth_stats_out_rdy           )
    );
    
    eth_hdrtostream eth_hdrtostream (
         .clk   (clk)
        ,.rst   (rst)
    
        ,.src_eth_hdrtostream_eth_hdr_val   (eth_tx_in_eth_tostream_eth_hdr_val     )
        ,.src_eth_hdrtostream_eth_hdr       (eth_tx_in_eth_tostream_eth_hdr         )
        ,.src_eth_hdrtostream_payload_len   (eth_tx_in_eth_tostream_payload_len     )
        ,.src_eth_hdrtostream_timestamp     ('0)
        ,.eth_hdrtostream_src_eth_hdr_rdy   (eth_tostream_eth_tx_in_eth_hdr_rdy     )
    
        ,.src_eth_hdrtostream_data_val      (eth_tx_in_eth_tostream_data_val        )
        ,.src_eth_hdrtostream_data          (eth_tx_in_eth_tostream_data            )
        ,.src_eth_hdrtostream_data_last     (eth_tx_in_eth_tostream_data_last       )
        ,.src_eth_hdrtostream_data_padbytes (eth_tx_in_eth_tostream_data_padbytes   )
        ,.eth_hdrtostream_src_data_rdy      (eth_tostream_eth_tx_in_data_rdy        )
    
        ,.eth_hdrtostream_dst_data_val      (engine_mac_tx_val                      )
        ,.eth_hdrtostream_dst_startframe    (engine_mac_tx_startframe               )
        ,.eth_hdrtostream_dst_frame_size    (engine_mac_tx_frame_size               )
        ,.eth_hdrtostream_dst_endframe      (engine_mac_tx_endframe                 )
        ,.eth_hdrtostream_dst_data          (engine_mac_tx_data                     )
        ,.eth_hdrtostream_dst_data_padbytes (engine_mac_tx_padbytes                 )
        ,.dst_eth_hdrtostream_data_rdy      (mac_engine_tx_rdy                      )

        ,.eth_lat_wr_val                    ()
        ,.eth_lat_wr_timestamp              ()
    );

endmodule
