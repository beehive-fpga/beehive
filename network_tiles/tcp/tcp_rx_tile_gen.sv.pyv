`include "tcp_rx_tile_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module tcp_rx_tile 
import tcp_pkg::*;
#(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter RX_DRAM_X = -1
    ,parameter RX_DRAM_Y = -1
)(
     input clk
    ,input rst

<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="tcp_rx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>

    ,output                                         tcp_format_dst_rx_hdr_val
    ,input                                          dst_tcp_format_rx_hdr_rdy
    ,output logic   [`IP_ADDR_W-1:0]                tcp_format_dst_rx_src_ip
    ,output logic   [`IP_ADDR_W-1:0]                tcp_format_dst_rx_dst_ip
    ,output logic   [`TOT_LEN_W-1:0]                tcp_format_dst_rx_tcp_tot_len
    ,output tcp_pkt_hdr                             tcp_format_dst_rx_tcp_hdr
    
    ,output logic                                   tcp_format_dst_rx_data_val
    ,output logic   [`MAC_INTERFACE_W-1:0]          tcp_format_dst_rx_data
    ,input                                          dst_tcp_format_rx_data_rdy
    ,output logic                                   tcp_format_dst_rx_last
    ,output logic   [`MAC_PADBYTES_W-1:0]           tcp_format_dst_rx_padbytes
    
    ,output logic                                   read_store_buf_q_req_val
    ,input  rx_store_buf_q_struct                   read_store_buf_q_req_data
    ,input  logic                                   read_store_buf_q_empty
    
    ,output logic                                   store_buf_tmp_buf_store_rx_rd_req_val
    ,output logic   [PAYLOAD_ENTRY_ADDR_W-1:0]      store_buf_tmp_buf_store_rx_rd_req_addr
    ,input  logic                                   tmp_buf_store_store_buf_rx_rd_req_rdy

    ,input  logic                                   tmp_buf_store_store_buf_rx_rd_resp_val
    ,input  logic   [`MAC_INTERFACE_W-1:0]          tmp_buf_store_store_buf_rx_rd_resp_data
    ,output logic                                   store_buf_tmp_buf_store_rx_rd_resp_rdy

    ,output logic                                   store_buf_tmp_buf_free_slab_rx_req_val
    ,output logic   [RX_TMP_BUF_ADDR_W-1:0]         store_buf_tmp_buf_free_slab_rx_req_addr
    ,input  logic                                   tmp_buf_free_slab_store_buf_rx_req_rdy

    ,output logic                                   store_buf_commit_idx_rd_req_val
    ,output logic   [FLOWID_W-1:0]                  store_buf_commit_idx_rd_req_flowid
    ,input  logic                                   commit_idx_store_buf_rd_req_rdy
                                                                            
    ,input  logic                                   commit_idx_store_buf_rd_resp_val
    ,input  tcp_buf_idx                             commit_idx_store_buf_rd_resp_data
    ,output logic                                   store_buf_commit_idx_rd_resp_rdy
    
    ,output logic                                   store_buf_commit_idx_wr_req_val
    ,output logic   [FLOWID_W-1:0]                  store_buf_commit_idx_wr_req_flowid
    ,output tcp_buf_idx                             store_buf_commit_idx_wr_req_data
    ,input  logic                                   commit_idx_store_buf_wr_req_rdy
    
    ,input  logic                                   app_new_flow_notif_val
    ,input  logic   [FLOWID_W-1:0]                  app_new_flow_flowid
    ,input  four_tuple_struct                       app_new_flow_lookup
    ,output logic                                   app_new_flow_notif_rdy
    
    ,output logic                                   app_rx_head_idx_wr_req_val
    ,output logic   [FLOWID_W-1:0]                  app_rx_head_idx_wr_req_addr
    ,output tcp_buf_idx                             app_rx_head_idx_wr_req_data
    ,input  logic                                   rx_head_idx_app_wr_req_rdy

    ,output logic                                   app_rx_head_idx_rd_req_val
    ,output logic   [FLOWID_W-1:0]                  app_rx_head_idx_rd_req_addr
    ,input  logic                                   rx_head_idx_app_rd_req_rdy
    
    ,input  logic                                   rx_head_idx_app_rd_resp_val
    ,input  tcp_buf_idx                             rx_head_idx_app_rd_resp_data
    ,output logic                                   app_rx_head_idx_rd_resp_rdy

    ,output logic                                   app_rx_commit_idx_rd_req_val
    ,output logic   [FLOWID_W-1:0]                  app_rx_commit_idx_rd_req_addr
    ,input  logic                                   rx_commit_idx_app_rd_req_rdy

    ,input  logic                                   rx_commit_idx_app_rd_resp_val
    ,input  tcp_buf_idx                             rx_commit_idx_app_rd_resp_data
    ,output logic                                   app_rx_commit_idx_rd_resp_rdy

    ,output logic                                   app_rx_free_req_val
    ,output logic   [RX_PAYLOAD_PTR_W-1:0]          app_rx_free_req_addr
    ,output logic   [MALLOC_LEN_W-1:0]              app_rx_free_req_len
    ,input  logic                                   rx_free_app_req_rdy

    ,output                                         rx_store_buf_rx_buf_store_rd_req_val
    ,output         [FLOWID_W-1:0]                  rx_store_buf_rx_buf_store_rd_req_flowid
    ,output         [RX_PAYLOAD_IDX_W-1:0]          rx_store_buf_rx_buf_store_rd_req_idx
    ,input logic                                    rx_buf_store_rx_store_buf_rd_req_rdy

    ,input logic                                    rx_buf_store_rx_store_buf_rd_resp_val
    ,input          tcp_buf                         rx_buf_store_rx_store_buf_rd_resp_data
    ,output                                         rx_store_buf_rx_buf_store_rd_resp_rdy
);
    
<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    
    logic                           merger_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   merger_vrtoc_data_noc0_data;    
    logic                           vrtoc_merger_data_noc0_rdy;
    
    logic                           tcp_rx_out_merger_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   tcp_rx_out_merger_data_noc0_data;    
    logic                           merger_tcp_rx_out_data_noc0_rdy;
    
    logic                           ctovr_splitter_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_splitter_data_noc0_data;
    logic                           splitter_ctovr_data_noc0_rdy;     
    
    logic                           splitter_tcp_rx_in_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   splitter_tcp_rx_in_data_noc0_data;
    logic                           tcp_rx_in_splitter_data_noc0_rdy;     
    
    logic                           splitter_tcp_rx_ptr_if_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   splitter_tcp_rx_ptr_if_data_noc0_data;
    logic                           tcp_rx_ptr_if_splitter_data_noc0_rdy;     
    
    logic                           tcp_rx_ptr_if_merger_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   tcp_rx_ptr_if_merger_data_noc0_data;    
    logic                           merger_tcp_rx_ptr_if_data_noc0_rdy;
    
    logic                           tcp_rx_notif_if_merger_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   tcp_rx_notif_if_merger_data_noc0_data;    
    logic                           merger_tcp_rx_notif_if_data_noc0_rdy;
    
    logic                           tcp_rx_in_tcp_format_hdr_val;
    logic                           tcp_format_tcp_rx_in_hdr_rdy;
    logic   [`IP_ADDR_W-1:0]        tcp_rx_in_tcp_format_src_ip;
    logic   [`IP_ADDR_W-1:0]        tcp_rx_in_tcp_format_dst_ip;
    logic   [`TOT_LEN_W-1:0]        tcp_rx_in_tcp_format_tcp_len;

    logic                           tcp_rx_in_tcp_format_data_val;
    logic   [`MAC_INTERFACE_W-1:0]  tcp_rx_in_tcp_format_data;
    logic                           tcp_format_tcp_rx_in_data_rdy;
    logic                           tcp_rx_in_tcp_format_last;
    logic   [`MAC_PADBYTES_W-1:0]   tcp_rx_in_tcp_format_padbytes;

    logic                           rx_payload_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   rx_payload_noc0_data;
    logic                           noc0_rx_payload_rdy;

    logic                           noc0_rx_payload_val;
    logic   [`NOC_DATA_WIDTH-1:0]   noc0_rx_payload_data;
    logic                           rx_payload_noc0_rdy;
    
    logic                           store_buf_fifo_wr_val;
    logic   [`NOC_DATA_WIDTH-1:0]   store_buf_fifo_wr_data;
    logic                           fifo_store_buf_wr_rdy;

    logic                           fifo_noc_rd_val;
    logic   [`NOC_DATA_WIDTH-1:0]   fifo_noc_rd_data;
    logic                           noc_fifo_rd_rdy;
    logic                           noc_fifo_rd_req;
    
    logic                           ctovr_splitter_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] ctovr_splitter_ctrl_noc1_data;
    logic                           splitter_ctovr_ctrl_noc1_rdy;
    
    logic                           splitter_mem_resp_ctd_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] splitter_mem_resp_ctd_ctrl_noc1_data;
    logic                           mem_resp_ctd_splitter_ctrl_noc1_rdy;
    
    logic                           splitter_ptr_if_ctd_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] splitter_ptr_if_ctd_ctrl_noc1_data;
    logic                           ptr_if_ctd_splitter_ctrl_noc1_rdy;
    
    logic                           mem_resp_ctd_rx_payload_ctrl_noc1_val;
    logic   [`NOC_DATA_WIDTH-1:0]   mem_resp_ctd_rx_payload_ctrl_noc1_data;
    logic                           rx_payload_mem_resp_ctd_ctrl_noc1_rdy;
    
    logic                           ptr_if_ctd_rx_app_ctrl_noc1_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ptr_if_ctd_rx_app_ctrl_noc1_data;
    logic                           rx_app_ptr_if_ctd_ctrl_noc1_rdy;
    
    logic                           dtc_vrtoc_ctrl_noc1_val;
    logic   [`CTRL_NOC1_DATA_W-1:0] dtc_vrtoc_ctrl_noc1_data;    
    logic                           vrtoc_dtc_ctrl_noc1_rdy;
    
    logic                           rx_app_dtc_ctrl_noc1_val;
    logic   [`NOC_DATA_WIDTH-1:0]   rx_app_dtc_ctrl_noc1_data;
    logic                           dtc_rx_app_ctrl_noc1_rdy;

    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) tcp_rx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="tcp_rx", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block",
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );
    
    assign ctovr_router_ctrl_noc2_yummy = 1'b0;
    assign vrtoc_router_ctrl_noc2_val = 1'b0;
    assign vrtoc_router_ctrl_noc2_data = '0;

    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_data_noc0_data        )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val         )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy       )

        ,.ctovr_dst_data    (ctovr_splitter_data_noc0_data      )
        ,.ctovr_dst_val     (ctovr_splitter_data_noc0_val       )
        ,.dst_ctovr_rdy     (splitter_ctovr_data_noc0_rdy       )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (merger_vrtoc_data_noc0_data    )
        ,.src_vrtoc_val     (merger_vrtoc_data_noc0_val     )
        ,.vrtoc_src_rdy     (vrtoc_merger_data_noc0_rdy     )

        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data        )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val         )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy       )

        ,.ctovr_dst_data    (ctovr_splitter_ctrl_noc1_data      )
        ,.ctovr_dst_val     (ctovr_splitter_ctrl_noc1_val       )
        ,.dst_ctovr_rdy     (splitter_ctovr_ctrl_noc1_rdy       )
    );
    
    beehive_noc_fbits_splitter #(
         .NOC_FBITS_W       (`NOC_FBITS_WIDTH       )
        ,.NOC_DATA_W        (`CTRL_NOC1_DATA_W      )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN           )
        ,.MSG_LEN_HI        (`CTRL_MSG_LENGTH_HI    )
        ,.MSG_LEN_LO        (`CTRL_MSG_LENGTH_LO    )
        ,.FBITS_HI          (`CTRL_MSG_DST_FBITS_HI )
        ,.FBITS_LO          (`CTRL_MSG_DST_FBITS_LO )
        ,.num_targets       (2                      )
        ,.fbits_type0       (TCP_RX_BUF_IF_FBITS    )
        ,.fbits_type1       (TCP_RX_APP_PTR_IF_FBITS)
    ) ctrl_beehive_noc_splitter (
         .clk   (clk    )
        ,.rst_n (~rst   )
    
        ,.src_splitter_vr_noc_val   (ctovr_splitter_ctrl_noc1_val           )
        ,.src_splitter_vr_noc_dat   (ctovr_splitter_ctrl_noc1_data          )
        ,.splitter_src_vr_noc_rdy   (splitter_ctovr_ctrl_noc1_rdy           )
    
        ,.splitter_dst0_vr_noc_val  (splitter_mem_resp_ctd_ctrl_noc1_val    )
        ,.splitter_dst0_vr_noc_dat  (splitter_mem_resp_ctd_ctrl_noc1_data   )
        ,.dst0_splitter_vr_noc_rdy  (mem_resp_ctd_splitter_ctrl_noc1_rdy    )
    
        ,.splitter_dst1_vr_noc_val  (splitter_ptr_if_ctd_ctrl_noc1_val      )
        ,.splitter_dst1_vr_noc_dat  (splitter_ptr_if_ctd_ctrl_noc1_data     )
        ,.dst1_splitter_vr_noc_rdy  (ptr_if_ctd_splitter_ctrl_noc1_rdy      )
    
        ,.splitter_dst2_vr_noc_val  ()
        ,.splitter_dst2_vr_noc_dat  ()
        ,.dst2_splitter_vr_noc_rdy  ('0)
    
        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  ('0)
    
        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  ('0)
    );

    extra_hdr_noc_ctrl_to_data #(
        .EXTRA_W    (DRAM_REQ_W )
    ) mem_resp_ctd (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.src_noc_ctd_val   (splitter_mem_resp_ctd_ctrl_noc1_val    )
        ,.src_noc_ctd_data  (splitter_mem_resp_ctd_ctrl_noc1_data   )
        ,.noc_ctd_src_rdy   (mem_resp_ctd_splitter_ctrl_noc1_rdy    )
    
        ,.noc_ctd_dst_val   (mem_resp_ctd_rx_payload_ctrl_noc1_val  )
        ,.noc_ctd_dst_data  (mem_resp_ctd_rx_payload_ctrl_noc1_data )
        ,.dst_noc_ctd_rdy   (rx_payload_mem_resp_ctd_ctrl_noc1_rdy  )
    );
    
    extra_hdr_noc_ctrl_to_data #(
        .EXTRA_W    (TCP_EXTRA_W    )
    ) ptr_if_ctd (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.src_noc_ctd_val   (splitter_ptr_if_ctd_ctrl_noc1_val      )
        ,.src_noc_ctd_data  (splitter_ptr_if_ctd_ctrl_noc1_data     )
        ,.noc_ctd_src_rdy   (ptr_if_ctd_splitter_ctrl_noc1_rdy      )
    
        ,.noc_ctd_dst_val   (ptr_if_ctd_rx_app_ctrl_noc1_val        )
        ,.noc_ctd_dst_data  (ptr_if_ctd_rx_app_ctrl_noc1_data       )
        ,.dst_noc_ctd_rdy   (rx_app_ptr_if_ctd_ctrl_noc1_rdy        )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC1_DATA_W  )
    ) ctrl_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (dtc_vrtoc_ctrl_noc1_data       )
        ,.src_vrtoc_val     (dtc_vrtoc_ctrl_noc1_val        )
        ,.vrtoc_src_rdy     (vrtoc_dtc_ctrl_noc1_rdy        )

        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val     )
		,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy   )
    );

    extra_hdr_noc_data_to_ctrl #(
        .EXTRA_W    (TCP_EXTRA_W    )
    ) ptr_if_dtc (
         .clk   (clk    )
        ,.rst   (rst    )
    
        ,.src_noc_dtc_val   (rx_app_dtc_ctrl_noc1_val   )
        ,.src_noc_dtc_data  (rx_app_dtc_ctrl_noc1_data  )
        ,.noc_dtc_src_rdy   (dtc_rx_app_ctrl_noc1_rdy   )
    
        ,.noc_dtc_dst_val   (dtc_vrtoc_ctrl_noc1_val    )
        ,.noc_dtc_dst_data  (dtc_vrtoc_ctrl_noc1_data   )
        ,.dst_noc_dtc_rdy   (vrtoc_dtc_ctrl_noc1_rdy    )
    );
    
    // merge NoC traffic for sending data from the TCP engine to DRAM buffers and
    // traffic for answering whether or not data is available
    beehive_noc_prio_merger #(
         .NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN       )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
        ,.num_sources    (2)
    ) merger (   
         .clk   (clk)
        ,.rst_n (~rst)
    
        ,.src0_merger_vr_noc_val    (fifo_noc_rd_val                        )
        ,.src0_merger_vr_noc_dat    (fifo_noc_rd_data                       )
        ,.merger_src0_vr_noc_rdy    (noc_fifo_rd_rdy                        )
    
        ,.src1_merger_vr_noc_val    (tcp_rx_notif_if_merger_data_noc0_val   )
        ,.src1_merger_vr_noc_dat    (tcp_rx_notif_if_merger_data_noc0_data  )
        ,.merger_src1_vr_noc_rdy    (merger_tcp_rx_notif_if_data_noc0_rdy   )
    
        ,.src2_merger_vr_noc_val    ('0)
        ,.src2_merger_vr_noc_dat    ('0)
        ,.merger_src2_vr_noc_rdy    ()
    
        ,.src3_merger_vr_noc_val    ('0)
        ,.src3_merger_vr_noc_dat    ('0)
        ,.merger_src3_vr_noc_rdy    ()
    
        ,.src4_merger_vr_noc_val    ('0)
        ,.src4_merger_vr_noc_dat    ('0)
        ,.merger_src4_vr_noc_rdy    ()
    
        ,.merger_dst_vr_noc_val     (merger_vrtoc_data_noc0_val             )
        ,.merger_dst_vr_noc_dat     (merger_vrtoc_data_noc0_data            )
        ,.dst_merger_vr_noc_rdy     (vrtoc_merger_data_noc0_rdy             )
    );

    // split between the app interface requests and the buffer copy module response
    beehive_noc_fbits_splitter #(
         .NOC_DATA_W        (`NOC_DATA_WIDTH    )
        ,.MSG_PAYLOAD_LEN   (`PAYLOAD_LEN       )
        ,.MSG_LEN_HI        (`MSG_LENGTH_HI     )
        ,.MSG_LEN_LO        (`MSG_LENGTH_LO     )
        ,.FBITS_HI          (`MSG_DST_FBITS_HI  )
        ,.FBITS_LO          (`MSG_DST_FBITS_LO  )
        ,.num_targets   (3'd2)
        ,.fbits_type0   (TCP_RX_BUF_IF_FBITS    )
        ,.fbits_type1   (PKT_IF_FBITS           )
    ) splitter (
         .clk   (clk    )
        ,.rst_n (~rst   )

        ,.src_splitter_vr_noc_val   (ctovr_splitter_data_noc0_val           )
        ,.src_splitter_vr_noc_dat   (ctovr_splitter_data_noc0_data          )
        ,.splitter_src_vr_noc_rdy   (splitter_ctovr_data_noc0_rdy           )

        ,.splitter_dst0_vr_noc_val  (noc0_rx_payload_val                    )
        ,.splitter_dst0_vr_noc_dat  (noc0_rx_payload_data                   )
        ,.dst0_splitter_vr_noc_rdy  (rx_payload_noc0_rdy                    )

        ,.splitter_dst1_vr_noc_val  (splitter_tcp_rx_in_data_noc0_val       )
        ,.splitter_dst1_vr_noc_dat  (splitter_tcp_rx_in_data_noc0_data      )
        ,.dst1_splitter_vr_noc_rdy  (tcp_rx_in_splitter_data_noc0_rdy       )

        ,.splitter_dst2_vr_noc_val  ()
        ,.splitter_dst2_vr_noc_dat  ()
        ,.dst2_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst3_vr_noc_val  ()
        ,.splitter_dst3_vr_noc_dat  ()
        ,.dst3_splitter_vr_noc_rdy  (1'b0)

        ,.splitter_dst4_vr_noc_val  ()
        ,.splitter_dst4_vr_noc_dat  ()
        ,.dst4_splitter_vr_noc_rdy  (1'b0)
    );
    
    tcp_rx_noc_in tcp_rx_noc_in (
         .clk   (clk)
        ,.rst   (rst)

        ,.noc0_ctovr_tcp_rx_in_val      (splitter_tcp_rx_in_data_noc0_val   )
        ,.noc0_ctovr_tcp_rx_in_data     (splitter_tcp_rx_in_data_noc0_data  )
        ,.tcp_rx_in_noc0_ctovr_rdy      (tcp_rx_in_splitter_data_noc0_rdy   )
                                                                        
        ,.tcp_rx_in_tcp_format_hdr_val  (tcp_rx_in_tcp_format_hdr_val       )
        ,.tcp_rx_in_tcp_format_src_ip   (tcp_rx_in_tcp_format_src_ip        )
        ,.tcp_rx_in_tcp_format_dst_ip   (tcp_rx_in_tcp_format_dst_ip        )
        ,.tcp_rx_in_tcp_format_tcp_len  (tcp_rx_in_tcp_format_tcp_len       )
        ,.tcp_format_tcp_rx_in_hdr_rdy  (tcp_format_tcp_rx_in_hdr_rdy       )
                                                                            
        ,.tcp_rx_in_tcp_format_data_val (tcp_rx_in_tcp_format_data_val      )
        ,.tcp_rx_in_tcp_format_data     (tcp_rx_in_tcp_format_data          )
        ,.tcp_rx_in_tcp_format_last     (tcp_rx_in_tcp_format_last          )
        ,.tcp_rx_in_tcp_format_padbytes (tcp_rx_in_tcp_format_padbytes      )
        ,.tcp_format_tcp_rx_in_data_rdy (tcp_format_tcp_rx_in_data_rdy      )
    );

    rx_tcp_format_wrap tcp_format (
         .clk   (clk)
        ,.rst   (rst)
        
        ,.src_tcp_format_rx_hdr_val     (tcp_rx_in_tcp_format_hdr_val   )
        ,.src_tcp_format_rx_src_ip      (tcp_rx_in_tcp_format_src_ip    )
        ,.src_tcp_format_rx_dst_ip      (tcp_rx_in_tcp_format_dst_ip    )
        ,.src_tcp_format_rx_tcp_len     (tcp_rx_in_tcp_format_tcp_len   )
        ,.tcp_format_src_rx_hdr_rdy     (tcp_format_tcp_rx_in_hdr_rdy   )
                                                                        
        ,.src_tcp_format_rx_data_val    (tcp_rx_in_tcp_format_data_val  )
        ,.src_tcp_format_rx_data        (tcp_rx_in_tcp_format_data      )
        ,.src_tcp_format_rx_last        (tcp_rx_in_tcp_format_last      )
        ,.src_tcp_format_rx_padbytes    (tcp_rx_in_tcp_format_padbytes  )
        ,.tcp_format_src_rx_data_rdy    (tcp_format_tcp_rx_in_data_rdy  )
    
        ,.tcp_format_dst_rx_hdr_val     (tcp_format_dst_rx_hdr_val      )
        ,.dst_tcp_format_rx_hdr_rdy     (dst_tcp_format_rx_hdr_rdy      )
        ,.tcp_format_dst_rx_src_ip      (tcp_format_dst_rx_src_ip       )
        ,.tcp_format_dst_rx_dst_ip      (tcp_format_dst_rx_dst_ip       )
        ,.tcp_format_dst_rx_tcp_tot_len (tcp_format_dst_rx_tcp_tot_len  )
        ,.tcp_format_dst_rx_tcp_hdr     (tcp_format_dst_rx_tcp_hdr      )
                                                                        
        ,.tcp_format_dst_rx_data_val    (tcp_format_dst_rx_data_val     )
        ,.tcp_format_dst_rx_data        (tcp_format_dst_rx_data         )
        ,.dst_tcp_format_rx_data_rdy    (dst_tcp_format_rx_data_rdy     )
        ,.tcp_format_dst_rx_last        (tcp_format_dst_rx_last         )
        ,.tcp_format_dst_rx_padbytes    (tcp_format_dst_rx_padbytes     )
    );

    bsg_fifo_1r1w_small #( 
         .width_p   (`NOC_DATA_WIDTH    )
        ,.els_p     (4                  )
        ,.harden_p  (1)
    ) store_buf_noc_fifo ( 
         .clk_i     (clk    )
        ,.reset_i   (rst    )
    
        ,.v_i       (store_buf_fifo_wr_val  )
        ,.data_i    (store_buf_fifo_wr_data )
        ,.ready_o   (fifo_store_buf_wr_rdy  )
    
        ,.v_o       (fifo_noc_rd_val        )
        ,.data_o    (fifo_noc_rd_data       )
        ,.yumi_i    (noc_fifo_rd_req        )
    );
    
    assign noc_fifo_rd_req = fifo_noc_rd_val & noc_fifo_rd_rdy;

    rx_payload_store_buf_cp #(
         .SRC_X     (SRC_X                  )
        ,.SRC_Y     (SRC_Y                  )
        ,.RX_DRAM_X (RX_DRAM_X              )
        ,.RX_DRAM_Y (RX_DRAM_Y              )
        ,.FBITS     (TCP_RX_BUF_IF_FBITS    )
    ) store_buf (
         .clk   (clk)
        ,.rst   (rst)
        
        // I/O for the NoC
        ,.rx_payload_noc0_val                       (store_buf_fifo_wr_val                      )
        ,.rx_payload_noc0_data                      (store_buf_fifo_wr_data                     )
        ,.noc0_rx_payload_rdy                       (fifo_store_buf_wr_rdy                      )
                                                                                                
        ,.noc_rx_payload_val                        (mem_resp_ctd_rx_payload_ctrl_noc1_val      )
        ,.noc_rx_payload_data                       (mem_resp_ctd_rx_payload_ctrl_noc1_data     )
        ,.rx_payload_noc_rdy                        (rx_payload_mem_resp_ctd_ctrl_noc1_rdy      )
        
        ,.read_store_buf_q_req_val                  (read_store_buf_q_req_val                   )
        ,.read_store_buf_q_req_data                 (read_store_buf_q_req_data                  )
        ,.read_store_buf_q_empty                    (read_store_buf_q_empty                     )

        ,.store_buf_tmp_buf_store_rx_rd_req_val     (store_buf_tmp_buf_store_rx_rd_req_val      )
        ,.store_buf_tmp_buf_store_rx_rd_req_addr    (store_buf_tmp_buf_store_rx_rd_req_addr     )
        ,.tmp_buf_store_store_buf_rx_rd_req_rdy     (tmp_buf_store_store_buf_rx_rd_req_rdy      )
                                                                                                
        ,.tmp_buf_store_store_buf_rx_rd_resp_val    (tmp_buf_store_store_buf_rx_rd_resp_val     )
        ,.tmp_buf_store_store_buf_rx_rd_resp_data   (tmp_buf_store_store_buf_rx_rd_resp_data    )
        ,.store_buf_tmp_buf_store_rx_rd_resp_rdy    (store_buf_tmp_buf_store_rx_rd_resp_rdy     )
                                                                                                
        ,.store_buf_tmp_buf_free_slab_rx_req_val    (store_buf_tmp_buf_free_slab_rx_req_val     )
        ,.store_buf_tmp_buf_free_slab_rx_req_addr   (store_buf_tmp_buf_free_slab_rx_req_addr    )
        ,.tmp_buf_free_slab_store_buf_rx_req_rdy    (tmp_buf_free_slab_store_buf_rx_req_rdy     )
                                                                                                
        ,.store_buf_commit_idx_rd_req_val           (store_buf_commit_idx_rd_req_val            )
        ,.store_buf_commit_idx_rd_req_flowid        (store_buf_commit_idx_rd_req_flowid         )
        ,.commit_idx_store_buf_rd_req_rdy           (commit_idx_store_buf_rd_req_rdy            )
                                                                                                
        ,.commit_idx_store_buf_rd_resp_val          (commit_idx_store_buf_rd_resp_val           )
        ,.commit_idx_store_buf_rd_resp_data         (commit_idx_store_buf_rd_resp_data          )
        ,.store_buf_commit_idx_rd_resp_rdy          (store_buf_commit_idx_rd_resp_rdy           )
                                                                                                
        ,.store_buf_commit_idx_wr_req_val           (store_buf_commit_idx_wr_req_val            )
        ,.store_buf_commit_idx_wr_req_flowid        (store_buf_commit_idx_wr_req_flowid         )
        ,.store_buf_commit_idx_wr_req_data          (store_buf_commit_idx_wr_req_data           )
        ,.commit_idx_store_buf_wr_req_rdy           (commit_idx_store_buf_wr_req_rdy            )

        ,.rx_store_buf_rx_buf_store_rd_req_val(rx_store_buf_rx_buf_store_rd_req_val)
        ,.rx_store_buf_rx_buf_store_rd_req_flowid(rx_store_buf_rx_buf_store_rd_req_flowid)
        ,.rx_store_buf_rx_buf_store_rd_req_idx(rx_store_buf_rx_buf_store_rd_req_idx)
        ,.rx_buf_store_rx_store_buf_rd_req_rdy(rx_buf_store_rx_store_buf_rd_req_rdy)

        ,.rx_buf_store_rx_store_buf_rd_resp_val(rx_buf_store_rx_store_buf_rd_resp_val)
        ,.rx_buf_store_rx_store_buf_rd_resp_data(rx_buf_store_rx_store_buf_rd_resp_data)
        ,.rx_store_buf_rx_buf_store_rd_resp_rdy(rx_store_buf_rx_buf_store_rd_resp_rdy)
    );


    tcp_rx_app_if_wrap #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) app_if_wrap (
         .clk   (clk)
        ,.rst   (rst)
        
        ,.tcp_rx_notif_if_noc0_vrtoc_val    (tcp_rx_notif_if_merger_data_noc0_val   )
        ,.tcp_rx_notif_if_noc0_vrtoc_data   (tcp_rx_notif_if_merger_data_noc0_data  )
        ,.noc0_vrtoc_tcp_rx_notif_if_rdy    (merger_tcp_rx_notif_if_data_noc0_rdy   )
                                                                                
        ,.app_new_flow_notif_val            (app_new_flow_notif_val                 )
        ,.app_new_flow_flowid               (app_new_flow_flowid                    )
        ,.app_new_flow_entry                (app_new_flow_lookup                    )
        ,.app_new_flow_notif_rdy            (app_new_flow_notif_rdy                 )
                                                                                
        ,.noc_tcp_rx_ptr_if_val             (ptr_if_ctd_rx_app_ctrl_noc1_val        )
        ,.noc_tcp_rx_ptr_if_data            (ptr_if_ctd_rx_app_ctrl_noc1_data       )
        ,.tcp_rx_ptr_if_noc_rdy             (rx_app_ptr_if_ctd_ctrl_noc1_rdy        )
                                                                                 
        ,.tcp_rx_ptr_if_noc_val             (rx_app_dtc_ctrl_noc1_val               )
        ,.tcp_rx_ptr_if_noc_data            (rx_app_dtc_ctrl_noc1_data              )
        ,.noc_tcp_rx_ptr_if_rdy             (dtc_rx_app_ctrl_noc1_rdy               )
                                                                                
        ,.app_rx_head_idx_wr_req_val        (app_rx_head_idx_wr_req_val             )
        ,.app_rx_head_idx_wr_req_addr       (app_rx_head_idx_wr_req_addr            )
        ,.app_rx_head_idx_wr_req_data       (app_rx_head_idx_wr_req_data            )
        ,.rx_head_idx_app_wr_req_rdy        (rx_head_idx_app_wr_req_rdy             )
                                                                                    
        ,.app_rx_head_idx_rd_req_val        (app_rx_head_idx_rd_req_val             )
        ,.app_rx_head_idx_rd_req_addr       (app_rx_head_idx_rd_req_addr            )
        ,.rx_head_idx_app_rd_req_rdy        (rx_head_idx_app_rd_req_rdy             )
                                                                                    
        ,.rx_head_idx_app_rd_resp_val       (rx_head_idx_app_rd_resp_val            )
        ,.rx_head_idx_app_rd_resp_data      (rx_head_idx_app_rd_resp_data           )
        ,.app_rx_head_idx_rd_resp_rdy       (app_rx_head_idx_rd_resp_rdy            )
                                                                                    
        ,.app_rx_commit_idx_rd_req_val      (app_rx_commit_idx_rd_req_val           )
        ,.app_rx_commit_idx_rd_req_addr     (app_rx_commit_idx_rd_req_addr          )
        ,.rx_commit_idx_app_rd_req_rdy      (rx_commit_idx_app_rd_req_rdy           )
                                                                                    
        ,.rx_commit_idx_app_rd_resp_val     (rx_commit_idx_app_rd_resp_val          )
        ,.rx_commit_idx_app_rd_resp_data    (rx_commit_idx_app_rd_resp_data         )
        ,.app_rx_commit_idx_rd_resp_rdy     (app_rx_commit_idx_rd_resp_rdy          )

        ,.app_rx_free_req_val               (app_rx_free_req_val                    )
        ,.app_rx_free_req_addr              (app_rx_free_req_addr                   )
        ,.app_rx_free_req_len               (app_rx_free_req_len                    )
        ,.rx_free_app_req_rdy               (rx_free_app_req_rdy                    )
    );
endmodule
