`include "ip_rx_tile_defs.svh"
<%
# Get the basic configuration object
import sys
import os
sys.path.append(os.environ["BEEHIVE_PROJECT_ROOT"] + "/tile_generator/")
from tile_generator import BeehiveConfig
from noc_if_gen import NocInterfaceGen
import logging
logging.basicConfig(level=logging.INFO)
design_path = os.environ["BEEHIVE_DESIGN_ROOT"]
logging.info(f"Using tile config at {design_path}")
tile_config = BeehiveConfig(design_path + "/tile_config.xml")
noc_if_generator = NocInterfaceGen()
%>
module ip_rx_tile 
import tracker_pkg::*;
#(
     parameter SRC_X = -1
    ,parameter SRC_Y = -1
    ,parameter USE_INT_LB = 0
)(
     input clk
    ,input rst

<%
    noc_if_str = noc_if_generator.genNocInterface(src="src", module="ip_rx",
         dst="dst", nocs=tile_config.nocs, noc_widths=tile_config.nocs_data_width)
    print(noc_if_str)
%>
);

<%
router_wires = noc_if_generator.genNocProcessorWires(inst_name="router", nocs=tile_config.nocs,
        noc_widths = tile_config.nocs_data_width)
print(router_wires)
%>
    logic                           ip_rx_out_lb_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ip_rx_out_lb_data;    
    logic                           lb_ip_rx_out_rdy;
    
    logic                           lb_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   lb_vrtoc_data_noc0_data;    
    logic                           vrtoc_lb_data_noc0_rdy;
    
    logic                           ip_rx_out_vrtoc_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ip_rx_out_vrtoc_data_noc0_data;    
    logic                           vrtoc_ip_rx_out_data_noc0_rdy;
    
    logic                           ctovr_log_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ctovr_log_data_noc0_data;
    logic                           log_ctovr_data_noc0_rdy;
    
    logic                           log_ip_rx_in_data_noc0_val;
    logic   [`NOC_DATA_WIDTH-1:0]   log_ip_rx_in_data_noc0_data;
    logic                           ip_rx_in_log_data_noc0_rdy;     
    
    logic                           ip_rx_in_ip_format_rx_val;
    tracker_stats_struct            ip_rx_in_ip_format_rx_timestamp;
    logic   [`NOC_DATA_WIDTH-1:0]   ip_rx_in_ip_format_rx_data;
    logic                           ip_rx_in_ip_format_rx_last;
    logic   [`NOC_PADBYTES_WIDTH-1:0] ip_rx_in_ip_format_rx_padbytes;
    logic                           ip_format_ip_rx_in_rx_rdy;
    
    logic                           ip_format_ip_rx_out_rx_hdr_val;
    ip_pkt_hdr                      ip_format_ip_rx_out_rx_ip_hdr;
    tracker_stats_struct            ip_format_ip_rx_out_rx_timestamp;
    logic                           ip_rx_out_ip_format_rx_hdr_rdy;

    logic                           ip_format_ip_rx_out_rx_data_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ip_format_ip_rx_out_rx_data;
    logic                           ip_format_ip_rx_out_rx_last;
    logic   [`NOC_PADBYTES_WIDTH-1:0] ip_format_ip_rx_out_rx_padbytes;
    logic                           ip_rx_out_ip_format_rx_data_rdy;
    
    logic                           ctovr_rd_tracker_in_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  ctovr_rd_tracker_in_data;
    logic                           rd_tracker_in_ctovr_rdy;

    logic                           rd_tracker_out_vrtoc_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  rd_tracker_out_vrtoc_data;
    logic                           vrtoc_rd_tracker_out_rdy;

    logic                           router_ctovr_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  router_ctovr_ctrl_noc1_data;
    logic                           ctovr_router_ctrl_noc1_yummy;

    logic                           vrtoc_router_ctrl_noc1_val;
    logic   [`CTRL_NOC_DATA_W-1:0]  vrtoc_router_ctrl_noc1_data;
    logic                           router_vrtoc_ctrl_noc1_yummy;
    
    noc_router_block #(
         .SRC_X (SRC_X  )
        ,.SRC_Y (SRC_Y  )
    ) ip_rx_noc_router_block (
         .clk   (clk    )
        ,.rst   (rst    )
<%
    noc_ports = noc_if_generator.genNocInstantiation(src="src",
    port_name="router_block", dst="dst", noc_src="src", noc_dst="dst",
    module="ip_rx", nocs=tile_config.nocs)
    print(noc_ports)
    
    processor_ports = noc_if_generator.genNocProcessorInstantiation(module="router_block", 
        processor="process", inst_name="router", nocs=tile_config.nocs)
    print(processor_ports)
%>
    );

    assign ctovr_router_ctrl_noc2_yummy = 1'b0;
    assign vrtoc_router_ctrl_noc2_val = 1'b0;
    assign vrtoc_router_ctrl_noc2_data = '0;
    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        
        ,.src_ctovr_data    (router_ctovr_data_noc0_data    )
        ,.src_ctovr_val     (router_ctovr_data_noc0_val     )
        ,.ctovr_src_yummy   (ctovr_router_data_noc0_yummy   )

        ,.ctovr_dst_data    (ctovr_log_data_noc0_data       )
        ,.ctovr_dst_val     (ctovr_log_data_noc0_val        )
        ,.dst_ctovr_rdy     (log_ctovr_data_noc0_rdy        )
    );

    
    beehive_credit_to_valrdy #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) ctrl_noc1_beehive_credit_to_valrdy (
         .clk   (clk)
        ,.reset (rst)
        ,.src_ctovr_data    (router_ctovr_ctrl_noc1_data    )
        ,.src_ctovr_val     (router_ctovr_ctrl_noc1_val     )
        ,.ctovr_src_yummy   (ctovr_router_ctrl_noc1_yummy   )

        ,.ctovr_dst_data    (ctovr_rd_tracker_in_data       )
        ,.ctovr_dst_val     (ctovr_rd_tracker_in_val        )
        ,.dst_ctovr_rdy     (rd_tracker_in_ctovr_rdy        )
    );

    tracker_top #(
         .SRC_X                 (SRC_X              )
        ,.SRC_Y                 (SRC_Y              )
        ,.TRACKER_DEPTH_LOG2    (TRACKER_ADDR_W     )
        ,.DATA_NOC_W            (`NOC_DATA_WIDTH    )
        ,.REQ_NOC_W             (`CTRL_NOC_DATA_W   )
        ,.RESP_NOC_W            (`CTRL_NOC_DATA_W   )
    ) tracker (
         .clk   (clk    )
        ,.rst   (rst    )
        
        ,.ctovr_rd_tracker_in_val   (ctovr_rd_tracker_in_val        )
        ,.ctovr_rd_tracker_in_data  (ctovr_rd_tracker_in_data       )
        ,.rd_tracker_in_ctovr_rdy   (rd_tracker_in_ctovr_rdy        )
                                                                    
        ,.rd_tracker_out_vrtoc_val  (rd_tracker_out_vrtoc_val       )
        ,.rd_tracker_out_vrtoc_data (rd_tracker_out_vrtoc_data      )
        ,.vrtoc_rd_tracker_out_rdy  (vrtoc_rd_tracker_out_rdy       )
    
        ,.noc_wr_tracker_in_val     (ctovr_log_data_noc0_val        )
        ,.noc_wr_tracker_in_data    (ctovr_log_data_noc0_data       )
        ,.wr_tracker_noc_in_rdy     (log_ctovr_data_noc0_rdy        )
        
        ,.wr_tracker_noc_out_val    (log_ip_rx_in_data_noc0_val     )
        ,.wr_tracker_noc_out_data   (log_ip_rx_in_data_noc0_data    )
        ,.noc_wr_tracker_out_rdy    (ip_rx_in_log_data_noc0_rdy     )
    );
    
    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`CTRL_NOC_DATA_W   )
    ) ctrl_noc1_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (rd_tracker_out_vrtoc_data      )
        ,.src_vrtoc_val     (rd_tracker_out_vrtoc_val       )
        ,.vrtoc_src_rdy     (vrtoc_rd_tracker_out_rdy       )

        ,.vrtoc_dst_data    (vrtoc_router_ctrl_noc1_data    )
        ,.vrtoc_dst_val     (vrtoc_router_ctrl_noc1_val     )
        ,.dst_vrtoc_yummy   (router_vrtoc_ctrl_noc1_yummy   )
    );

    beehive_valrdy_to_credit #(
        .NOC_DATA_W (`NOC_DATA_WIDTH    )
    ) data_noc0_beehive_valrdy_to_credit (
         .clk       (clk)
        ,.reset     (rst)

        ,.src_vrtoc_data    (lb_vrtoc_data_noc0_data        )
        ,.src_vrtoc_val     (lb_vrtoc_data_noc0_val         )
        ,.vrtoc_src_rdy     (vrtoc_lb_data_noc0_rdy         )

        ,.vrtoc_dst_data    (vrtoc_router_data_noc0_data    )
        ,.vrtoc_dst_val     (vrtoc_router_data_noc0_val     )
        ,.dst_vrtoc_yummy   (router_vrtoc_data_noc0_yummy   )
    );
    
    ip_rx_noc_in ip_rx_noc_in (
         .clk   (clk)
        ,.rst   (rst)
        
        ,.noc0_ctovr_ip_rx_in_val           (log_ip_rx_in_data_noc0_val     )
        ,.noc0_ctovr_ip_rx_in_data          (log_ip_rx_in_data_noc0_data    )
        ,.ip_rx_in_noc0_ctovr_rdy           (ip_rx_in_log_data_noc0_rdy     )
                                                                            
        ,.ip_rx_in_ip_format_rx_val         (ip_rx_in_ip_format_rx_val      )
        ,.ip_rx_in_ip_format_rx_timestamp   (ip_rx_in_ip_format_rx_timestamp)
        ,.ip_rx_in_ip_format_rx_data        (ip_rx_in_ip_format_rx_data     )
        ,.ip_rx_in_ip_format_rx_last        (ip_rx_in_ip_format_rx_last     )
        ,.ip_rx_in_ip_format_rx_padbytes    (ip_rx_in_ip_format_rx_padbytes )
        ,.ip_format_ip_rx_in_rx_rdy         (ip_format_ip_rx_in_rx_rdy      )
    );

    ip_stream_format_pipe #(
        .DATA_WIDTH (`NOC_DATA_WIDTH    )
    ) ip_format (
         .clk   (clk)
        ,.rst   (rst)
        
        // Data stream in from MAC
        ,.src_ip_format_rx_val          (ip_rx_in_ip_format_rx_val          )
        ,.src_ip_format_rx_timestamp    (ip_rx_in_ip_format_rx_timestamp    )
        ,.ip_format_src_rx_rdy          (ip_format_ip_rx_in_rx_rdy          )
        ,.src_ip_format_rx_data         (ip_rx_in_ip_format_rx_data         )
        ,.src_ip_format_rx_last         (ip_rx_in_ip_format_rx_last         )
        ,.src_ip_format_rx_padbytes     (ip_rx_in_ip_format_rx_padbytes     )

        // Header and data out
        ,.ip_format_dst_rx_hdr_val      (ip_format_ip_rx_out_rx_hdr_val     )
        ,.ip_format_dst_rx_ip_hdr       (ip_format_ip_rx_out_rx_ip_hdr      )
        ,.ip_format_dst_rx_timestamp    (ip_format_ip_rx_out_rx_timestamp   )
        ,.dst_ip_format_rx_hdr_rdy      (ip_rx_out_ip_format_rx_hdr_rdy     )

        ,.ip_format_dst_rx_data_val     (ip_format_ip_rx_out_rx_data_val    )
        ,.ip_format_dst_rx_data         (ip_format_ip_rx_out_rx_data        )
        ,.ip_format_dst_rx_last         (ip_format_ip_rx_out_rx_last        )
        ,.ip_format_dst_rx_padbytes     (ip_format_ip_rx_out_rx_padbytes    )
        ,.dst_ip_format_rx_data_rdy     (ip_rx_out_ip_format_rx_data_rdy    )
    );

    ip_rx_noc_out_copy #(
         .SRC_X (SRC_X)
        ,.SRC_Y (SRC_Y)
    ) rx_noc_out (
         .clk   (clk)
        ,.rst   (rst)
        
        ,.ip_format_ip_rx_out_rx_hdr_val    (ip_format_ip_rx_out_rx_hdr_val     )
        ,.ip_format_ip_rx_out_rx_ip_hdr     (ip_format_ip_rx_out_rx_ip_hdr      )
        ,.ip_format_ip_rx_out_rx_timestamp  (ip_format_ip_rx_out_rx_timestamp   )
        ,.ip_rx_out_ip_format_rx_hdr_rdy    (ip_rx_out_ip_format_rx_hdr_rdy     )
                                                                                
        ,.ip_format_ip_rx_out_rx_data_val   (ip_format_ip_rx_out_rx_data_val    )
        ,.ip_format_ip_rx_out_rx_data       (ip_format_ip_rx_out_rx_data        )
        ,.ip_format_ip_rx_out_rx_last       (ip_format_ip_rx_out_rx_last        )
        ,.ip_format_ip_rx_out_rx_padbytes   (ip_format_ip_rx_out_rx_padbytes    )
        ,.ip_rx_out_ip_format_rx_data_rdy   (ip_rx_out_ip_format_rx_data_rdy    )
        
        ,.ip_rx_out_noc0_vrtoc_val          (ip_rx_out_lb_val                   )
        ,.ip_rx_out_noc0_vrtoc_data         (ip_rx_out_lb_data                  )
        ,.noc0_vrtoc_ip_rx_out_rdy          (lb_ip_rx_out_rdy                   )
    );
    
    logic                           ip_rx_out_buf_rd_val;
    logic   [`NOC_DATA_WIDTH-1:0]   ip_rx_out_buf_rd_data;
    logic                           ip_rx_out_buf_rd_yumi;
    logic                           ip_rx_out_buf_rd_rdy;
    assign ip_rx_out_buf_rd_yumi = ip_rx_out_buf_rd_rdy & ip_rx_out_buf_rd_val; 

    bsg_two_fifo #(
        .width_p    (`NOC_DATA_WIDTH    )
    ) ip_rx_out_buf (
         .clk_i     (clk    )
        ,.reset_i   (rst    )
        
        ,.ready_o   (lb_ip_rx_out_rdy       )
        ,.data_i    (ip_rx_out_lb_data      )
        ,.v_i       (ip_rx_out_lb_val       )
        
        ,.v_o       (ip_rx_out_buf_rd_val   )
        ,.data_o    (ip_rx_out_buf_rd_data  )
        ,.yumi_i    (ip_rx_out_buf_rd_yumi  )
    );

generate
    if (USE_INT_LB == 1) begin
        ip_rx_lb_out lb (
             .clk   (clk    )
            ,.rst   (rst    )
            
            ,.src_ip_rx_lb_val  (ip_rx_out_buf_rd_val       )
            ,.src_ip_rx_lb_data (ip_rx_out_buf_rd_data      )
            ,.ip_rx_lb_src_rdy  (ip_rx_out_buf_rd_rdy       )
        
            ,.ip_rx_lb_dst_val  (lb_vrtoc_data_noc0_val     )
            ,.ip_rx_lb_dst_data (lb_vrtoc_data_noc0_data    )
            ,.dst_ip_rx_lb_rdy  (vrtoc_lb_data_noc0_rdy     )
        );
    end
    else begin
        assign lb_vrtoc_data_noc0_val = ip_rx_out_buf_rd_val;
        assign lb_vrtoc_data_noc0_data = ip_rx_out_buf_rd_data;
        assign ip_rx_out_buf_rd_rdy = vrtoc_lb_data_noc0_rdy;
    end
endgenerate
endmodule
